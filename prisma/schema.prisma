// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  invoices      Invoice[]
  customers     Customer[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Customer {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  email     String
  address   String
  phone     String?
  userId    String    @db.ObjectId
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  invoices  Invoice[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Invoice {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  invoiceNo   String        @unique
  customerId  String        @db.ObjectId
  customer    Customer      @relation(fields: [customerId], references: [id], onDelete: Cascade)
  userId      String        @db.ObjectId
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  items       InvoiceItem[]
  subtotal    Float
  tax         Float         @default(0)
  discount    Float         @default(0)
  total       Float
  status      InvoiceStatus @default(PENDING)
  dueDate     DateTime
  issueDate   DateTime      @default(now())
  notes       String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model InvoiceItem {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  invoiceId   String  @db.ObjectId
  invoice     Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  description String
  quantity    Int
  unitPrice   Float
  amount      Float
}

enum InvoiceStatus {
  PENDING
  PAID
  OVERDUE
  CANCELLED
}